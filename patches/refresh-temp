Bottom: cee1587b3346bc4d0b8bda99f068516bafdfd361
Top:    f01c07b33d36f554c3795dd734f232576262bbd6
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   2016-05-14 00:25:16 -0300

Refresh of dependent-special-funcs.patch

---

diff --git a/libcc1/libcp1plugin.cc b/libcc1/libcp1plugin.cc
index 36fda16..e359bc5 100644
--- a/libcc1/libcp1plugin.cc
+++ b/libcc1/libcp1plugin.cc
@@ -1836,6 +1836,13 @@ plugin_new_dependent_value_expr (cc1_plugin::connection *self,
   tree conv_type = convert_in (conv_type_in);
   tree identifier;
 
+  if (TREE_CODE (scope) != NAMESPACE_DECL)
+    {
+      tree type = TREE_TYPE (scope);
+      gcc_assert (TYPE_NAME (type) == scope);
+      scope = type;
+    }
+
   if (flags == (GCC_CP_SYMBOL_FUNCTION | GCC_CP_FLAG_SPECIAL_FUNCTION))
     {
       bool assop = false, convop = false;
@@ -2061,6 +2068,13 @@ plugin_new_dependent_value_expr (cc1_plugin::connection *self,
   tree res = identifier;
   if (!scope)
     res = lookup_name_real (res, 0, 0, true, 0, 0);
+  else if (!TYPE_P (scope) || !dependent_scope_p (scope))
+    {
+      res = lookup_qualified_name (scope, res, false, true);
+      /* We've already resolved the name in the scope, so skip the
+	 build_qualified_name call below.  */
+      scope = NULL;
+    }
   if (targs)
     res = lookup_template_function (res, targlist (targs));
   if (scope)
