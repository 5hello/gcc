Bottom: 785408457dfd5a19223fd314565b1f156de6db8b
Top:    5f627b7cd44566808f29aefd8cf32dcbdd1e4535
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   2015-12-29 02:57:46 -0200

Refresh of template-support.patch

---

diff --git a/include/gcc-cp-fe.def b/include/gcc-cp-fe.def
index dc118e5..ce1db70 100644
--- a/include/gcc-cp-fe.def
+++ b/include/gcc-cp-fe.def
@@ -447,17 +447,19 @@ GCC_METHOD5 (gcc_type, start_new_enum_type,
 	     const char *,	      /* Argument FILENAME.  */
 	     unsigned int)	      /* Argument LINE_NUMBER.  */
 
-/* Add a new constant to the most-recently-started enum type.  NAME is
-   the constant's name and VALUE is its value.  */
+/* Add a new constant to an enum type.  NAME is the constant's name
+   and VALUE is its value.  */
 
-GCC_METHOD2 (int /* bool */, build_add_enum_constant,
+GCC_METHOD3 (int /* bool */, build_add_enum_constant,
+	     gcc_type,		       /* Argument ENUM_TYPE.  */
 	     const char *,	       /* Argument NAME.  */
 	     unsigned long)	       /* Argument VALUE.  */
 
 /* After all the constants have been added to an enum, the type must
    be "finished".  This does some final cleanups in GCC.  */
 
-GCC_METHOD0 (int /* bool */, finish_enum_type)
+GCC_METHOD1 (int /* bool */, finish_enum_type,
+	     gcc_type)		       /* Argument ENUM_TYPE.  */
 
 /* Create a new function type.  RETURN_TYPE is the type returned by
    the function, and ARGUMENT_TYPES is a vector, of length NARGS, of
diff --git a/libcc1/libcp1plugin.cc b/libcc1/libcp1plugin.cc
index 4bbe63d..2929748 100644
--- a/libcc1/libcp1plugin.cc
+++ b/libcc1/libcp1plugin.cc
@@ -1070,10 +1070,11 @@ plugin_start_new_enum_type (cc1_plugin::connection *self,
 
 int
 plugin_build_add_enum_constant (cc1_plugin::connection *,
+				gcc_type enum_type_in,
 				const char *name,
 				unsigned long value)
 {
-  tree enum_type = current_class_type;
+  tree enum_type = convert_in (enum_type_in);
 
   gcc_assert (TREE_CODE (enum_type) == ENUMERAL_TYPE);
 
@@ -1084,9 +1085,10 @@ plugin_build_add_enum_constant (cc1_plugin::connection *,
 }
 
 int
-plugin_finish_enum_type (cc1_plugin::connection *)
+plugin_finish_enum_type (cc1_plugin::connection *,
+			 gcc_type enum_type_in)
 {
-  tree enum_type = current_class_type;
+  tree enum_type = convert_in (enum_type_in);
 
   finish_enum_value_list (enum_type);
   finish_enum (enum_type);
