Bottom: 5e077f665ca1a4c1ae8a0c52436f88b4bd220f59
Top:    e6346db38e72a8985e58da88719748a8bf460575
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   2016-03-09 12:35:08 -0300

Refresh of template-support.patch

---

diff --git a/libcc1/libcp1plugin.cc b/libcc1/libcp1plugin.cc
index 7cfd075..69c53f8 100644
--- a/libcc1/libcp1plugin.cc
+++ b/libcc1/libcp1plugin.cc
@@ -1352,7 +1352,7 @@ plugin_new_template_value_parm (cc1_plugin::connection *self,
   declarator.u.id.sfk = sfk_none;
 
   cp_decl_specifier_seq declspec;
-  memset (&declspec, 0, sizeof (declspec));
+  clear_decl_specs (&declspec);
   // cp_parser_set_decl_spec_type (&declspec, convert_in (type), -token-, false):
   declspec.any_specifiers_p = declspec.any_type_specifiers_p = true;
   declspec.type = convert_in (type);
@@ -1631,18 +1631,45 @@ plugin_ternary_value_expr (cc1_plugin::connection *self,
 gcc_expr
 plugin_unary_type_expr (cc1_plugin::connection *self,
 			const char *unary_op,
-			gcc_type operand)
+			gcc_typedecl operand)
 {
-  /* FIXME: implement sizeof, alignof, ...  */
+  plugin_context *ctx = static_cast<plugin_context *> (self);
+  tree type = convert_in (operand);
+  tree_code opcode = ERROR_MARK;
+  switch (CHARS2 (binary_op[0], binary_op[1]))
+    {
+      /* FIXME: implement sizeof, alignof, ...  */
+    default:
+      gcc_unreachable ();
+    }
+  int processing_template_decl_save = processing_template_decl;
+  processing_template_decl = 1;
+  tree val = cxx_sizeof_or_alignof_type (type, opcode, true);
+  processing_template_decl = processing_template_decl_save;
+  return convert_out (ctx->preserve (val));
 }
 
 gcc_expr
 plugin_type_value_expr (cc1_plugin::connection *self,
 			const char *binary_op,
-			gcc_type operand1,
+			gcc_typedecl operand1,
 			gcc_expr operand2)
 {
-  /* FIXME: implement type casts, offsetof, ...  */
+  plugin_context *ctx = static_cast<plugin_context *> (self);
+  tree type = convert_in (operand1);
+  tree expr = convert_in (operand2);
+  tree_code opcode = ERROR_MARK;
+  switch (CHARS2 (binary_op[0], binary_op[1]))
+    {
+      /* FIXME: implement type casts, ...  */
+    default:
+      gcc_unreachable ();
+    }
+  int processing_template_decl_save = processing_template_decl;
+  processing_template_decl = 1;
+  tree val = NULL_TREE;
+  processing_template_decl = processing_template_decl_save;
+  return convert_out (ctx->preserve (val));
 }
 
 gcc_typedecl
