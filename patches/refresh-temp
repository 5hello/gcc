Bottom: edd1b783d859c86749c1de597e03df81b0919495
Top:    77ea2104bbb697f3e1dc935ca0a88c12693af702
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   2016-03-30 05:21:43 -0300

Refresh of name-builtin-types.patch

---

diff --git a/libcc1/libcc1plugin.cc b/libcc1/libcc1plugin.cc
index 7e1c508..beb2d202 100644
--- a/libcc1/libcc1plugin.cc
+++ b/libcc1/libcc1plugin.cc
@@ -694,6 +694,26 @@ plugin_build_function_type (cc1_plugin::connection *self,
   return convert_out (ctx->preserve (result));
 }
 
+/* Return a builtin type associated with BUILTIN_NAME.  */
+
+static tree
+safe_lookup_builtin_type (const char *builtin_name)
+{
+  tree result = NULL_TREE;
+
+  if (!builtin_name)
+    return result;
+
+  result = identifier_global_value (get_identifier (builtin_name));
+
+  if (!result)
+    return result;
+
+  gcc_assert (TREE_CODE (result) == TYPE_DECL);
+  result = TREE_TYPE (result);
+  return result;
+}
+
 gcc_type
 plugin_int_type (cc1_plugin::connection *self,
 		 int is_unsigned, unsigned long size_in_bytes,
@@ -702,7 +722,10 @@ plugin_int_type (cc1_plugin::connection *self,
   tree result;
 
   if (builtin_name)
-    result = lookup_name (get_identifier (builtin_name));
+    {
+      result = safe_lookup_builtin_type (builtin_name);
+      gcc_assert (!result || TREE_CODE (result) == INTEGER_TYPE);
+    }
   else
     result = c_common_type_for_size (BITS_PER_UNIT * size_in_bytes,
 				     is_unsigned);
@@ -711,7 +734,6 @@ plugin_int_type (cc1_plugin::connection *self,
     result = error_mark_node;
   else
     {
-      gcc_assert (TREE_CODE (result) == INTEGER_TYPE);
       gcc_assert (!TYPE_UNSIGNED (result) == !is_unsigned);
       gcc_assert (TREE_CODE (TYPE_SIZE (result)) == INTEGER_CST);
       gcc_assert (TYPE_PRECISION (result) == BITS_PER_UNIT * size_in_bytes);
@@ -735,7 +757,7 @@ plugin_float_type (cc1_plugin::connection *,
 {
   if (builtin_name)
     {
-      tree result = lookup_name (get_identifier (builtin_name));
+      tree result = safe_lookup_builtin_type (builtin_name);
 
       if (!result)
 	return convert_out (error_mark_node);
diff --git a/libcc1/libcp1plugin.cc b/libcc1/libcp1plugin.cc
index 0c76aec..159d466 100644
--- a/libcc1/libcp1plugin.cc
+++ b/libcc1/libcp1plugin.cc
@@ -1740,6 +1740,26 @@ plugin_start_specialize_class_template (cc1_plugin::connection *self,
   return convert_out (ctx->preserve (type));
 }
 
+/* Return a builtin type associated with BUILTIN_NAME.  */
+
+static tree
+safe_lookup_builtin_type (const char *builtin_name)
+{
+  tree result = NULL_TREE;
+
+  if (!builtin_name)
+    return result;
+
+  result = identifier_global_value (get_identifier (builtin_name));
+
+  if (!result)
+    return result;
+
+  gcc_assert (TREE_CODE (result) == TYPE_DECL);
+  result = TREE_TYPE (result);
+  return result;
+}
+
 gcc_type
 plugin_int_type (cc1_plugin::connection *self,
 		 int is_unsigned, unsigned long size_in_bytes,
@@ -1748,7 +1768,10 @@ plugin_int_type (cc1_plugin::connection *self,
   tree result;
 
   if (builtin_name)
-    result = lookup_name (get_identifier (builtin_name));
+    {
+      result = safe_lookup_builtin_type (builtin_name);
+      gcc_assert (!result || TREE_CODE (result) == INTEGER_TYPE);
+    }
   else
     result = c_common_type_for_size (BITS_PER_UNIT * size_in_bytes,
 				     is_unsigned);
@@ -1757,7 +1780,6 @@ plugin_int_type (cc1_plugin::connection *self,
     result = error_mark_node;
   else
     {
-      gcc_assert (TREE_CODE (result) == INTEGER_TYPE);
       gcc_assert (!TYPE_UNSIGNED (result) == !is_unsigned);
       gcc_assert (TREE_CODE (TYPE_SIZE (result)) == INTEGER_CST);
       gcc_assert (TYPE_PRECISION (result) == BITS_PER_UNIT * size_in_bytes);
@@ -1781,7 +1803,7 @@ plugin_float_type (cc1_plugin::connection *,
 {
   if (builtin_name)
     {
-      tree result = lookup_name (get_identifier (builtin_name));
+      tree result = safe_lookup_builtin_type (builtin_name);
 
       if (!result)
 	return convert_out (error_mark_node);
