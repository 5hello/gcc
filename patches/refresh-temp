Bottom: a988682169cf10c36f41118506c0a5f6fde4d5c2
Top:    2b4ee16b7bcc5910650eca9a9c3d175e84256ba3
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   2016-01-11 14:58:04 -0200

Refresh of template-support.patch

---

diff --git a/include/gcc-cp-fe.def b/include/gcc-cp-fe.def
index da26426..751f12b 100644
--- a/include/gcc-cp-fe.def
+++ b/include/gcc-cp-fe.def
@@ -207,8 +207,10 @@ GCC_METHOD2 (gcc_type, build_pointer_to_member_type,
 /* Start a template parameter list, so that subsequent
    build_template_typename_parm and build_template_value_parm calls
    create template parameters in the list.  The list is closed by a
-   new_decl call, so that it declares a template class or template
-   function with the parameter list.  */
+   new_decl call with GCC_CP_SYMBOL_FUNCTION or GCC_CP_SYMBOL_CLASS,
+   that, when the scope is a template parameter list, closes the
+   parameter list and declares a template function or a template class
+   with the parameter list.  */
 
 GCC_METHOD0 (int, start_new_template_decl)
 
diff --git a/include/gcc-cp-interface.h b/include/gcc-cp-interface.h
index 95999de..371cfcf 100644
--- a/include/gcc-cp-interface.h
+++ b/include/gcc-cp-interface.h
@@ -132,6 +132,11 @@ enum gcc_cp_symbol_kind
 
   GCC_CP_SYMBOL_LABEL,
 
+  /* A class, or, in a template parameter list scope, a declaration of
+     a template class, closing the parameter list.  */
+
+  GCC_CP_SYMBOL_CLASS,
+
   GCC_CP_SYMBOL_MASK = 15,
   GCC_CP_FLAG_BASE,
 
diff --git a/libcc1/libcp1plugin.cc b/libcc1/libcp1plugin.cc
index 097929258..c1ece8a 100644
--- a/libcc1/libcp1plugin.cc
+++ b/libcc1/libcp1plugin.cc
@@ -476,10 +476,14 @@ plugin_new_decl (cc1_plugin::connection *self,
       gcc_assert (!sym_flags);
       return convert_out (error_mark_node);
 
+      /* FIXME: add GCC_CP_SYMBOL_CLASS.  */
+
     default:
       abort ();
     }
 
+  /* FIXME: check for a template parameter list scope.  */
+
   source_location loc = ctx->get_source_location (filename, line_number);
   bool class_member_p = at_class_scope_p ();
   bool ctor = false, dtor = false;
@@ -1033,7 +1037,8 @@ plugin_finish_record_or_union (cc1_plugin::connection *,
   gcc_assert (compare_tree_int (TYPE_SIZE_UNIT (record_or_union_type),
 				size_in_bytes) == 0);
 
-  // FIXME: end_template_decl if it's a template?
+  // FIXME: end_template_decl if it's a template?  I don't think so,
+  // we're only defining specializations.
 
   return 1;
 }
