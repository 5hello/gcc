Bottom: f01c07b33d36f554c3795dd734f232576262bbd6
Top:    7e26936883e7f06be9584865905f500eb99a0580
Author: Alexandre Oliva <aoliva@redhat.com>
Date:   2016-05-11 05:13:18 -0300

implement static_assert

---

diff --git a/include/gcc-cp-fe.def b/include/gcc-cp-fe.def
index d149847..6536597 100644
--- a/include/gcc-cp-fe.def
+++ b/include/gcc-cp-fe.def
@@ -784,3 +784,12 @@ GCC_METHOD5 (int /* bool */, build_constant,
 
 GCC_METHOD1 (gcc_type, error,
 	     const char *)		 /* Argument MESSAGE.  */
+
+/* Declare a static_assert with the given CONDITION and ERRORMSG at
+   FILENAME:LINE_NUMBER.  */
+
+GCC_METHOD4 (int /* bool */, new_static_assert,
+	     gcc_expr,     /* Argument CONDITION.  */
+	     const char *, /* Argument ERRORMSG.  */
+	     const char *, /* Argument FILENAME.  */
+	     unsigned int) /* Argument LINE_NUMBER.  */
diff --git a/libcc1/libcp1plugin.cc b/libcc1/libcp1plugin.cc
index e359bc5..2778b4f 100644
--- a/libcc1/libcp1plugin.cc
+++ b/libcc1/libcp1plugin.cc
@@ -1031,7 +1031,7 @@ plugin_new_decl (cc1_plugin::connection *self,
   if (template_decl_p)
     {
       decl = safe_push_template_decl (decl);
-      
+
       end_template_decl ();
 
       /* We only support one level of templates, because we only
@@ -1596,11 +1596,11 @@ plugin_build_method_type (cc1_plugin::connection *self,
     default:
       gcc_unreachable ();
     }
-  
+
   tree method_type = class_type
     ? build_memfn_type (func_type, class_type, quals, rquals)
     : apply_memfn_quals (func_type, quals, rquals);
-  
+
   plugin_context *ctx = static_cast<plugin_context *> (self);
   return convert_out (ctx->preserve (method_type));
 }
@@ -2324,7 +2324,7 @@ plugin_specialize_function_template (cc1_plugin::connection *self,
   source_location loc = ctx->get_source_location (filename, line_number);
   tree name = convert_in (template_decl);
   tree targsl = targlist (targs);
-  
+
   tree fnid = lookup_template_function (name, targsl);
   if (TREE_CODE (fnid) == TEMPLATE_ID_EXPR)
     SET_EXPR_LOCATION (fnid, loc);
@@ -2351,7 +2351,7 @@ plugin_start_specialize_class_template (cc1_plugin::connection *self,
 
   tree tdecl = finish_template_type (name, targlist (args), false);;
   DECL_SOURCE_LOCATION (tdecl) = loc;
-  
+
   tree type = start_class_def (TREE_TYPE (tdecl), base_classes);
 
   return convert_out (ctx->preserve (type));
@@ -2585,6 +2585,33 @@ plugin_error (cc1_plugin::connection *,
   return convert_out (error_mark_node);
 }
 
+int
+plugin_new_static_assert (cc1_plugin::connection *self,
+			  gcc_expr condition_in,
+			  const char *errormsg,
+			  const char *filename,
+			  unsigned int line_number)
+{
+  plugin_context *ctx = static_cast<plugin_context *> (self);
+  tree condition = convert_in (condition_in);
+
+  if (!errormsg)
+    errormsg = "";
+
+  tree message = build_string (strlen (errormsg) + 1, errormsg);
+
+  TREE_TYPE (message) = char_array_type_node;
+  fix_string_type (message);
+
+  source_location loc = ctx->get_source_location (filename, line_number);
+
+  bool member_p = at_class_scope_p ();
+
+  finish_static_assert (condition, message, loc, member_p);
+
+  return 1;
+}
+
 
 
 // Perform GC marking.
